// classe Baigneur

import java.awt.*; // Container, Color
import javax.swing.*;
import java.io.*;

//
/**
 * chaque Baigneur est un thread qui doit se synchroniser avec les autres
 * 
 * @author Cornelus Madjri & Sorelle Ngouoko
 *
 */
public class Baigneur extends Thread {
	static Semaphore panier; // attribut de classe
	static Semaphore cabine; // attribut de classe
	static PipedOutputStream po = null; // attribut de classe
	int numero; // numéro du Baigneur

	/**
	 * à faire une fois pour initialiser les sémaphores et le tube
	 * 
	 * @param nbPanier
	 * @param nbCabine
	 */
	static void init(int nbPanier, int nbCabine) {
		panier = new Semaphore(nbPanier);
		cabine = new Semaphore(nbCabine);
		try {
			po = new PipedOutputStream(BaigneursCreator.pi);
		} catch (IOException e) {
			System.out.println(e);
		}
	}

	/**
	 * accède aux variables de classe panier, cabine (de type Semaphore) et po
	 * (pipe output) : le tube dans lequel chaque Baigneur écrit ses résultats
	 * (son numéro et son état)
	 * 
	 * @param numero
	 */
	Baigneur(int numero) {
		this.numero = numero;
		start(); // on démarre le thread dans le constructeur
	}

	//
	/**
	 * envoi de numero et etat dans le tube po
	 * 
	 * @param etat
	 */
	void message(int etat) {
		try {
			po.write(numero);
			po.write(etat);
		} catch (IOException e) {
			System.out.println(e);
		}
	}

	//
	/**
	 * Initialisation d'une attente aléatoire
	 * 
	 * @param n
	 *            attente aléatoire
	 */
	void attente(int n) {
		Utile.attente(n);
	}

	/**
	 * l’activité d’un Baigneur
	 */
	public void run() {
		while (true) {
			attente(100);
			message(0); // arrive
			attente(60);
			panier.P();

			message(1); // prend un panier
			attente(80);
			cabine.P();

			message(2); // se déshabille
			attente(60);

			message(3); // se baigne
			cabine.V();
			attente(150);
			cabine.P();

			message(4); // se rhabille
			attente(80);

			message(5); // quitte
			cabine.V();
			attente(40);
			panier.V();
			int nb = 0;
			nb--;
			// numero--;
			/*
			 * if (nb == 0) { try { po.close(); } catch (Exception e) {
			 * System.out.println(e); } }
			 */
		}
	}
}// Fin class Baigneur

//-------------------------------------------------------------------------------------------------------------------------------------

//Classe BaogneursCretor

import java.io.*;
import java.io.PipedInputStream;
import java.awt.*;

import javax.swing.JFrame;
import javax.swing.JLabel;
import java.util.*;
import java.util.concurrent.*;

/**
 * la classe BaigneursCreator est un thread qui lit dans le tube et dessine les
 * états des baigneurs
 * 
 * // * @author Cornelus Madjri & Sorelle Ngouoko
 * 
 * @version
 *
 */
public class BaigneursCreator extends JFrame implements Runnable {
	int nbProc; // nombre de processus Baigneur
	int[] etatB; // tableau de l’état courant de chaque Baigneur
	JLabel[][] tE; // tableau de libellés

	static PipedInputStream pi = new PipedInputStream();

	// les noms des états d’un Baigneur
	String[] tEtat = { " Arrive ", // 0
			" Obtient Panier ", // 1
			" Se déshabille ", // 2
			"Se baigne ", // 3
			" Se rhabille ", // 4
			" Quitte " // 5
	};

	int nbEtat = tEtat.length; // nombre d’états
	String[] nomb = { // Noms des baigneurs (A à F), mais on pourrai mettre plus
	"A", "B", "C", "D", "E", "F" };

	/**
	 * constructeur de BaigneursCreator
	 * 
	 * @param nbProc
	 *            représente le nombre de processus
	 */
	BaigneursCreator(int nbProc) {
		Container f = getContentPane();
		this.nbProc = nbProc;
		etatB = new int[nbProc];
		tE = new JLabel[nbEtat][nbProc];
		for (int i = 0; i < etatB.length; i++)
			etatB[i] = 0;
		setTitle("La piscine");
		f.setLayout(new GridLayout(0, nbProc + 1));
		// Ligne de titre du haut
		JLabel l1 = new JLabel("BAIGNEURS");
		f.add(l1);

		for (int j = 0; j < nbProc; j++) {
			JLabel b = new JLabel(nomb[j], JLabel.CENTER);
			b.setOpaque(true);
			b.setBackground(Color.LIGHT_GRAY);// colonne des différents baigneur
			f.add(b);
		}

		for (int j = 0; j < nbEtat; j++) {
			JLabel l2 = new JLabel(tEtat[j]);
			l2.setOpaque(true);
			l2.setBackground(Color.LIGHT_GRAY); // colonne 1 des noms d’états
			f.add(l2);
			for (int i = 0; i < nbProc; i++) {
				JLabel l3 = new JLabel(" ", JLabel.CENTER);
				l3.setOpaque(true);
				tE[j][i] = l3;
				f.add(l3);
			}
		}

		setBounds(20, 20, 650, 300);
		setVisible(true);
	}

	/**
	 * Lit dans le tube pi et affiche suivant les valeurs lues
	 */
	public void run() {
		int numero; // numéro du baigneur
		try {
			while ((numero = pi.read()) != -1) {
				int etat = pi.read();
				// on modifie l’ancien état du baigneur
				tE[etatB[numero]][numero].setText(".");
				tE[etatB[numero]][numero].setBackground(Color.white);
				// on modifie le nouvel état du baigneur
				etatB[numero] = etat;
				tE[etat][numero].setText("*");
				tE[etat][numero].setBackground(Color.magenta);
				Utile.pause(500);

			}
			pi.close();
		} catch (IOException e) {
			System.out.println(e);
		}
	}
}// Fin class BaigneursCreator

//------------------------------------------------------------------------------------------------------------------------------------

//Classe Main

/**
 * 
 * @author Cornelus Madjri & Sorelle Ngouoko
 *
 */
public class Main {
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		final int nbr_Baigneur = 6; // nombre de baigneurs
		final int nbr_Panier = 3; // nombre de paniers
		final int nbr_Cabine = 4; // nombre de cabines
		// initialise les sémaphores
		// et ouvre en écriture le tube des résultats
		Baigneur.init(nbr_Panier, nbr_Cabine);

		// creer les threads baigneurs
		Baigneur[] baigneur = new Baigneur[nbr_Baigneur];
		for (int i = 0; i < nbr_Baigneur; i++)
			baigneur[i] = new Baigneur(i);

		// creer le thread DessinBaigneurs
		BaigneursCreator dessin = new BaigneursCreator(nbr_Baigneur);
		Thread tdessin = new Thread(dessin);
		tdessin.start();

		// attendre la fin de tous les threads Baigneur
		// et du thread de DessinBaigneurs
		try {
			for (int i = 0; i < nbr_Baigneur; i++)
				baigneur[i].join();
			tdessin.join();
		} catch (InterruptedException e) {
			System.out.println(e);
		}

		// le thread initial main se termine
		System.out.println("C'est fini");

	}
}// Fin classe main

//------------------------------------------------------------------------------------------------------------------------------------

//Classe Semaphore

/**
 * 
 * @author Cornelus Madjri & Sorelle Ngouoko
 *
 */
public class Semaphore {

	private int nbr_Jeton = 0; // nombre de jetons du sémaphore
	String nom; // nom du sémaphore

	/**
	 * 
	 * @param nom
	 *            nom du sémaphore
	 * @param nbr_Jeton
	 *            nombre de jetons du sémaphore
	 */
	public Semaphore(String nom, int nJeton) {
		this.nom = new String(nom);
		this.nbr_Jeton = nJeton;
	}

	/**
	 * 
	 * @param nJeton
	 *            nombre de jetons du sémaphore
	 */
	public Semaphore(int nbr_Jeton) {
		this("", nbr_Jeton);
	}

	/**
	 * Demande d'autorisation de construction. P() peut êre mis en minuscule
	 * 
	 * le thread est mis en attente sur l’objet si nJeton = 0. Quand il est
	 * réveillé, il reteste la valeur de nJeton.
	 * 
	 */
	synchronized public void P() { // Puis-je continuer ?
		try {
			while (nbr_Jeton == 0)
				wait();
		} catch (InterruptedException e) {
			System.out.println(e);
		}
		nbr_Jeton--; // il prend un jeton
	}

	/**
	 * V() peut être mis en minuscule
	 */
	synchronized public void V() { // Vas-y, continue !
		nbr_Jeton++; // on remet un jeton
		notify(); // on le fait savoir
	}

}// Fin Class Semaphore

//------------------------------------------------------------------------------------------------------------------------------------

//Classe Utile

/**
 * 
 * @author Cornelus Madjri & Sorelle Ngouoko
 *
 */
public class Utile {
	/**
	 * génère un nombre entre 0 et N-1 inclus
	 * 
	 * @param N
	 *            Limite
	 * @return le nombre alléaoire
	 */
	public static int aleat(int N) {
		return (int) ((Math.random() * 997) % N);
	}

	/**
	 * le thread s’endort pendant n millisecondes
	 * 
	 * @param n
	 *            durée du someil du thread
	 */
	public static void pause(int n) {
		try {
			Thread.sleep(n);
		} catch (InterruptedException e) {
			System.out.println(e);
		}
	}

	/**
	 * attente d’un nombre aléatoire de ms entre 0 et n
	 * 
	 * @param n
	 *            durée de l'attete
	 */
	public static void attente(int n) {
		try {
			Thread.sleep(aleat(n));
		} catch (InterruptedException e) {
			System.out.println(e);
		}
	}

} // Fin Class Utile


